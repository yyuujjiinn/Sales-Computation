// PROBLEM ON VIEWING, DI NA DDISPLAY UNG VIEW BY PRODUCT CLASS AND BY CLIENT NAME
// PROBLEM ON RECEIPT, PAG ANG ININPUT IS "RAEJZ EUGENE" sa first name and "MANUBAY" sa last name, ang napprint sa receipt is "RAEJZ EUGENE LANG"!!!

package salescomputationfixed;

import java.util.ArrayList; 
import java.util.Scanner; 

public class Salescomputationfixed { 
    
    static ArrayList<String> transactions = new ArrayList<>(); // Store transaction information
    static ArrayList<String> clients = new ArrayList<>(); // Store client information
    static Scanner input = new Scanner(System.in); // Scanner for user input
    static int transactionCount = 0; // This is for a loop wherein the transaction number will increase depending on the user 
    static int clientCount = 0; // Counter for client numbering

    public static void main(String[] args) {
        // Display welcome message and ask if the user wants to proceed
        while (true) {
            System.out.println("                [ Welcome to Sales Computation !!! ]");
            System.out.println();
            printDivider1();
            System.out.println(" This program will help you calculate your total sales and discounts.");
            System.out.println("       We'll calculate the tax and discounts automatically.");
            System.out.println("             Don't forget to review the final total!");
            printDivider1();
  
            
            displayMainMenu();

        }
        
    }


// Updated Main Menu Display
static void displayMainMenu() {
    String selectedOption;
    // Display the main menu
    do {
        System.out.println();
        System.out.println("SALE COMPUTATION");
        System.out.println("Please select from the following option then press enter:");
        System.out.println("[1] Add Client Information");
        System.out.println("[2] New Transaction");
        System.out.println("[3] View Transactions");
        System.out.println("[0] Exit");
        System.out.println();
        
        // Prompt the user for input
        System.out.print("Enter: ");
        selectedOption = input.next();
        System.out.println();

        switch (selectedOption) {
            case "1": // Add Client Information
                addClientInformation();
                break;

            case "2": // New Transaction
                newTransaction();
                break;

            case "3": // View Transactions
                printAllTransactions();
                break;

            case "0": // Exit
                printDivider1();
                System.out.println("Thank You!");
                input.close();
                System.exit(0);

            default:// Invalid input handling
                System.out.println("INVALID. Please enter [1], [2], [3], and [0] Only");
                printDivider1();
        }
    } while (!selectedOption.equals("0"));
}


// =========================== Display methods =============================== 
static void displaySaleComputationMenu1(String name, String lastName, int age, String gender) {
    System.out.println();
    System.out.println("SALE COMPUTATION");
    System.out.println("Please select from the following option then press enter:");
    System.out.println("[1] Compute Product");
    System.out.println("[0] Return to Main Menu");
    System.out.println();

    // Prompt the user for input
    String selectedOption;
    do {
        System.out.print("Enter: ");
        selectedOption = input.next();
        input.nextLine(); // Consume newline

        switch (selectedOption) {
            case "1":// Compute Product
                printProductTable();
                char productClassSelected;
                do {
                    productClassSelected = getProductClass(input);

                    if (productClassSelected == 'A') {
                        proccess_A_class(input, name, lastName, age, gender, productClassSelected);
                    } else if (productClassSelected == 'B') {
                        proccess_B_class(input, name, lastName, age, gender, productClassSelected);
                    }
                } while (productClassSelected != 'A' && productClassSelected != 'B');
                break;

            case "0":// Return to Main Menu
                System.out.println("Returning to the main menu...");
                displayMainMenu(); // Return to the main menu
                return;

            default:// Invalid input handling
                System.out.println("INVALID!!! [1] AND [0] Only");
                printDivider1();
        }
    } while (!selectedOption.equals("0"));
}

// ======================= DIVIDER AND PRICE DISPLAY =========================
static void printDivider1() 
{System.out.println("===================================================================" );//Display divider
 } 
        
static void printDivider2() 
{System.out.println(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::");//Display divider
 }

static void printPrice(int rawPriceProduct) 
{System.out.println("Price: " + rawPriceProduct);//Display the raw price
 } 
        
static void printDiscount(double discount) 
{System.out.println("Discount Amount: " + discount);//Display the discount amount
 } 
       
static void printTotalPrice(int priceProduct) 
{System.out.println("Total Price: " + priceProduct);//Display the total price
 } 

// ======================= GETTER METHODS ==================================== 
static String getName() {
    input.nextLine(); // Consume leftover newline
    System.out.print("Enter First Name: ");//First name input
    return input.nextLine().trim();
}

static String getNameLast() {
    System.out.print("Enter Last Name: ");//Last name input
    return input.nextLine().trim();
}

//Fixed an error when the input is not an integer

static int getAge() 
{System.out.print("Enter Age: "); // Age input
while (!input.hasNextInt()) 
{ 
System.out.println("Invalid input! Please enter a valid age:"); //Age input error handling
input.next();// Consume the invalid input 
} 
return input.nextInt();} 

// Fixed an error when the input is not an integer

static String getGender() 
{input.nextLine();// Consume the newline left by nextInt() 
while (true) 
{ 
System.out.print("Enter Gender (M/F): "); //Gender input
String gender = input.nextLine().trim().toUpperCase();// Trim spaces and convert to uppercase 
        
if (gender.equals("M") || gender.equals("F")) 
{return gender;} 
        
else 
{System.out.println("Invalid input! Please choose 'M' or 'F'.");//Gender Input error handling
  } 
 } 
} 
        
//Product Class Selection

static char getProductClass(Scanner input) {
    System.out.println();
    System.out.println("======= Select Product Class =======");
    System.out.println("[A] \n[B]");
    System.out.println();
    System.out.print("Enter Class: ");

    while (true) {
        String inputClass = input.next().trim().toUpperCase(); // Read input, trim spaces, and convert to uppercase
        if (inputClass.equals("A") || inputClass.equals("B")) {
            return inputClass.charAt(0); // Return the valid class
        } else {
            System.out.println("Invalid input! Please enter 'A' or 'B'.");
            System.out.print("Enter Class: ");//Prompt again for valid input
        }
    }
}
// Fixed an error when the input is not an integer

static int getQuantityProduct(Scanner input) 
{System.out.print("Enter Product Quantity: "); //Product quantity input

while (!input.hasNextInt()) {
    System.out.println("Invalid input! Please enter a numeric value.");//Product quantity input error handling
    input.next();
    System.out.print("Enter Product Quantity: ");//Prompt again for valid input
    }
    return input.nextInt();
} 

// Fixed an error when the input is not an integer

static int getProductNumber(Scanner input) {
    System.out.println();
    System.out.print("Enter Product Number: "); //Product number input
    
    while (!input.hasNextInt()) {  
        System.out.println("Invalid input! Please enter a numeric value.");//Product number input error handling
        input.next();
        System.out.print("Enter Product Number: "); //Prompt again for valid input
    }
    return input.nextInt();
}

// ======================= VIEW ALL TRANSACTIONS ============================

public static void printAllTransactions() {
    while (true) {
        System.out.println("===================================================================");
        System.out.println("[All Transactions]");
        System.out.println();

        // Display filtering options
        System.out.println("How would you like to filter transactions?");
        System.out.println("Please select from the following option then press enter:");
        System.out.println();
        System.out.println("[1] View All");
        System.out.println("[2] By Product Class");
        System.out.println("[3] By Client Name");
        System.out.println("[0] To Main Menu");
        System.out.println();
        System.out.print("Enter your choice: ");
        String choice = input.next();
        input.nextLine(); // Consume newline

        if (choice.equals("0")) {
            System.out.println("Returning to the main menu...");
            return;
        }

        // Check if transactions are empty for filtering options
        if (transactions.isEmpty() && (choice.equals("1") || choice.equals("2") || choice.equals("3") || choice.equals("4") || choice.equals("5") || choice.equals("6"))) {
            System.out.println("No transactions found.");
            continue;
        }

        switch (choice) {
            case "1":
                displayTransactions(transactions);
                break;
            case "2":
                System.out.println();
                String productClassInput;
                while (true) {
                    System.out.print("Enter Product Class (A/B): ");
                    productClassInput = input.nextLine().trim().toUpperCase();
                    if (productClassInput.equals("A") || productClassInput.equals("B")) {
                        break;
                    } else {
                        System.out.println("Invalid input! Please enter 'A' or 'B'.");
                    }
                }
                filterTransactions("Product Class", productClassInput);
                break; 
            case "3":
                System.out.println();
                System.out.println("Recorded Clients:");
                for (String client : clients) {
                    String[] clientDetails = client.split("\n");
                    if (clientDetails.length >= 2) {
                        String[] nameParts = clientDetails[1].split(":");
                        if (nameParts.length > 1) {
                            String fullName = nameParts[1].trim();
                            System.out.println("- " + fullName);
                        }
                    }
                }
                System.out.println();
                System.out.print("Enter Client First Name: ");
                String firstName = input.nextLine().trim();
                System.out.print("Enter Client Last Name: ");
                String lastName = input.nextLine().trim();
                String fullName = firstName + " " + lastName;
                System.out.println();
                filterTransactions("Full Name", fullName);
                break;
            default:
                System.out.println();
                System.out.println("Invalid input. Please try again.");
                System.out.println();
        }

        // Ask if the user wants to filter again or go back to main menu
        System.out.println();
        System.out.println("Please select from the following option then press enter:");
        System.out.println("[1] Filter Again");
        System.out.println("[0] Go Back to Main Menu");
        System.out.print("Enter your choice: ");
        String again = input.nextLine().trim();
        if (again.equals("0")) {
            System.out.println("Returning to the main menu...");
            return;
        }
        // If "1", the loop continues and filter menu is shown again
    }
}
        
// ======================= Display Transactions ============================
       
private static void displayTransactions(ArrayList<String> filteredTransactions) {
        for (String transaction : filteredTransactions) {
        System.out.println(transaction); } }
        
// ======================= Filter Transactions ============================       
        
private static void filterTransactions(String criteria, String filterValue) {
    ArrayList<String> filteredTransactions = new ArrayList<>();// Create a new list to store filtered transactions
    filterValue = filterValue.trim(); // Trim spaces from the input

    for (String transaction : transactions) {
        String[] lines = transaction.split("\n");//Split the transaction into lines for easier processing

        if (criteria.equalsIgnoreCase("Product No")) {
            // Extract the "Product Number" from the transaction
            for (String line : lines) {
                if (line.contains("Product Number:")) {
                    String productNumberString = line.split(":")[1].trim(); // Extract the product number value
                    if (productNumberString.equals(filterValue)) {
                        filteredTransactions.add(transaction);
                    }
                }
            }
        } else if (criteria.equalsIgnoreCase("Discount")) {
            // Extract the "Discount Amount" from the transaction
            for (String line : lines) {
                if (line.contains("Discount Amount:")) {
                    String discountString = line.split(":")[1].trim(); // Extract the discount value
                    try {
                        double discount = Double.parseDouble(discountString); // Parse the discount amount
                        double enteredDiscount = Double.parseDouble(filterValue); // Parse the user-entered discount
                        if (discount == enteredDiscount) {
                            filteredTransactions.add(transaction);//Add the transaction to the filtered list if it matches
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid discount format. Please enter a valid numeric value.");//Error handling for invalid discount format
                        return;
                    }
                }
            }
        } else if (criteria.equalsIgnoreCase("Total")) {
            // Extract the "Final Price" from the transaction
            for (String line : lines) {
                if (line.contains("Final Price:")) {
                    String finalPriceString = line.split(":")[1].trim(); // Extract the final price value
                    try {
                        double finalPrice = Double.parseDouble(finalPriceString); // Parse the final price
                        double enteredPrice = Double.parseDouble(filterValue); // Parse the user-entered price
                        if (finalPrice == enteredPrice) {
                            filteredTransactions.add(transaction);//Add the transaction to the filtered list if it matches
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid price format. Please enter a valid numeric value.");//Error handling for invalid price format
                        return;
                    }
                }
            }
        } else {
            // Improved: Extract the value from the table line and compare
            for (String line : lines) {
                String[] parts = line.split("\\|");
                if (parts.length >= 3) {
                    String label = parts[1].trim().toLowerCase();
                    String value = parts[2].trim().toLowerCase();
                    if (label.equals(criteria.toLowerCase())) {
                        if (value.equals(filterValue.toLowerCase())) {
                            filteredTransactions.add(transaction);
                            break;
                        }
                    }
                }
            }
        }
    }

    if (filteredTransactions.isEmpty()) {
        System.out.println("No transactions found with " + criteria + " = " + filterValue);//Display message if no transactions match the filter criteria
    } else {
        displayTransactions(filteredTransactions);//Display the filtered transactions
    }
}

// ======================= Calculation methods ============================= 
//// These methods are used to compute the price, discount, and final price of the products
static int computeQuantityProductPrice(int quantityProduct, int rawPriceProduct) 
{ return quantityProduct * rawPriceProduct; } 

static double computeDiscountAmount(int priceProduct, double discountPercentage) 
{ return priceProduct * discountPercentage; } 

static double computeDiscountedSales(int priceProduct, double discount) 
{ return priceProduct - discount; } 

// =============================== CLASS A Method =================================== 
//Changes return type to void 
//Added parameters
//Added arraylist for range, prices and discounts 

static void proccess_A_class(Scanner input, String name, String lastName, int age, String gender, char productClassSelected) {
    int productNumber, quantityProduct, rawPriceProduct = 0, priceProduct;//Product number, quantity, raw price and price product
    double discountPercentage = 0, discountAmount, finalPrice;//Discount percentage, amount and final price
    int[] rangesA = {100, 110, 120, 131};//Product number ranges
    int[] pricesA = {120, 135, 150};//Product prices
    double[] discountsA = {0.05, 0.075, 0.10};//Discount percentages
    boolean isvalid = false;//Boolean variable to check if the input is valid
    productNumber = 0;//Initialize product number

    //Display product class information
    System.out.println();
    System.out.println("============================== A Class ================================");
    System.out.println("                   Product number range (100 - 130)");
    System.out.println("=======================================================================");
    while (!isvalid) {
        productNumber = getProductNumber(input);//Get product number from user input    
    for (int i = 0; i < 3; i++) {
    if (productNumber >= rangesA[i] && productNumber < rangesA[i + 1]) {
        rawPriceProduct = pricesA[i];//Get raw price from the prices array
        discountPercentage = discountsA[i];//Get discount percentage from the discounts array
        isvalid = true;//Set isvalid to true if the input is valid
        break;
        } 
}
        if (!isvalid) {
            System.out.println("Invalid range! Try again (100 - 130)"); //Error handling for invalid range 
        }
    }

    printPrice(rawPriceProduct);//Display the raw price
    quantityProduct = getQuantityProduct(input);//Get product quantity from user input
    priceProduct = computeQuantityProductPrice(quantityProduct, rawPriceProduct);//Compute the total price based on quantity and raw price
    printTotalPrice(priceProduct);//Display the total price

    discountAmount = computeDiscountAmount(priceProduct, discountPercentage);//Compute the discount amount based on total price and discount percentage
    printDiscount(discountAmount);//Display the discount amount

    finalPrice = computeDiscountedSales(priceProduct, discountAmount);//Compute the final price after applying the discount
    printReceipt(name, lastName, age, gender, priceProduct, finalPrice, productClassSelected, productNumber, quantityProduct, discountAmount);// //Display the receipt with all the details
}

// ============================== CLASS B METHOD ===================================== 
//Changes return type to void 
//Added parameters 
//Added arraylist for range, prices and discounts 

static void proccess_B_class(Scanner input, String name, String lastName, int age, String gender, char productClassSelected) {
    int productNumber, quantityProduct, rawPriceProduct = 0, priceProduct;//Product number, quantity, raw price and price product
    double discountPercentage = 0, discountAmount, finalPrice;//Discount percentage, amount and final price
    int[] rangesB = {220, 230, 240, 251};//Product number ranges
    int[] pricesB = {100, 140, 170};//Product prices
    double[] discountsB = {0.15, 0.175, 0.20};//Discount percentages
    boolean isvalid = false;//Boolean variable to check if the input is valid
    productNumber = 0;//Initialize product number

    //Display product class information
    System.out.println();
    System.out.println("============================== B Class ================================");
    System.out.println("                   Product number range (220 - 250)");
    System.out.println("======================================================================="); 
    while (!isvalid) {
        productNumber = getProductNumber(input);//Get product number from user input
    for (int i = 0; i < 3; i++) {
    if (productNumber >= rangesB[i] && productNumber < rangesB[i + 1]) {
        rawPriceProduct = pricesB[i];//Get raw price from the prices array
        discountPercentage = discountsB[i];//Get discount percentage from the discounts array
        isvalid = true;//Set isvalid to true if the input is valid
        break;
        } 
    }
        if (!isvalid) {
            System.out.println("Invalid range! Try again (220 - 250)");//Error handling for invalid range
        }
    }

    printPrice(rawPriceProduct);//Display the raw price
    quantityProduct = getQuantityProduct(input);//Get product quantity from user input

    // Validate quantity
    while (quantityProduct <= 0) {
        System.out.println("Invalid quantity! Please enter a positive number.");//Error handling for invalid quantity
        quantityProduct = getQuantityProduct(input);//Prompt again for valid input
    }

    priceProduct = computeQuantityProductPrice(quantityProduct, rawPriceProduct);//Compute the total price based on quantity and raw price
    printTotalPrice(priceProduct);//Display the total price

    discountAmount = computeDiscountAmount(priceProduct, discountPercentage);//Compute the discount amount based on total price and discount percentage
    printDiscount(discountAmount);//Display the discount amount

    finalPrice = computeDiscountedSales(priceProduct, discountAmount);//Compute the final price after applying the discount
    printReceipt(name, lastName, age, gender, priceProduct, finalPrice, productClassSelected, productNumber, quantityProduct, discountAmount);//Display the receipt with all the details
}

// =============================== RECEIPT DISPLAY ========================= 
// Added parameters , call the parameters inside the out print 

static void printReceipt(String name, String lastName, int age, String gender, int priceProduct, double computedPrice, char productClass, int productNumber, int quantityProduct, double discountAmount) {
    transactionCount++; // Increment transaction count
    System.out.println();

    // Format the transaction details as a table
    String transaction =
        "                ========== Transaction #" + transactionCount + " ==========\n" +
        "         +-------------------+---------------------------+\n" +
        String.format("         | %-17s | %-25s |\n", " Full Name:", name + " " + lastName) +
        String.format("         | %-17s | %-25d |\n", " Age:", age) +
        String.format("         | %-17s | %-25s |\n", " Gender:", gender) +
        String.format("         | %-17s | %-25s |\n", " Product Class:", productClass) +
        String.format("         | %-17s | %-25d |\n", " Product Number:", productNumber) +
        String.format("         | %-17s | %-25d |\n", " Quantity:", quantityProduct) +
        String.format("         | %-17s | %-25.2f |\n", " Total Price:", (double) priceProduct) +
        String.format("         | %-17s | %-25.2f |\n", " Discount Amount:", discountAmount) +
        String.format("         | %-17s | %-25.2f |\n", " Final Price:", computedPrice) +
        "         +-------------------+---------------------------+\n";

    // Add the transaction to the list for later retrieval
    transactions.add(transaction);

    // Print the receipt
    printDivider1();
    System.out.println();
    System.out.println("                            [RECEIPT]:");
    System.out.println();
    System.out.println(transaction); // Print the transaction details
    printDivider1();
    System.out.println();

    // Ask the user what to do next
    askClientAction(name, lastName, age, gender);
}

// =============================== PRODUCT TABLE ============================= 
static void printProductTable() 
{
    System.out.println("-----------------------------------------------------------------------");
    System.out.println("|   Product Class   |   Product No.   |     Price    |    Discount    |");          
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|         A         |     100-109     |   Php120.00  |       5%       |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|                   |     110-119     |   Php135.00  |      7.5%      |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|                   |     120-130     |   Php150.00  |       10%      |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|         B         |     220-229     |   Php100.00  |       15%      |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|                   |     230-239     |   Php140.00  |      17.5%     |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|                   |     240-250     |   Php170.00  |       20%      |");
    System.out.println("-----------------------------------------------------------------------");
    
}

// =============================== ADD CLIENT INFORMATION ====================
static void addClientInformation() {
    while (true) {
        printDivider1();
        System.out.println("Adding a new client...");
        printDivider1();

        String name = getName();// Get first name from user input
        String lastName = getNameLast();// Get last name from user input
        int age = getAge();// Get age from user input
        String gender = getGender();// Get gender from user input
        printDivider1();

        // Increment client count and store client information
        clientCount++;
        String clientInfo = "Client #" + clientCount + "\n" +
                            "Name: " + name + " " + lastName + "\n" +
                            "Age: " + age + "\n" +
                            "Gender: " + gender;
        clients.add(clientInfo);// Add client information to the list

        System.out.println();
        System.out.println("Client added successfully!");
        printDivider1();
        System.out.println();
        System.out.println("Client Information:");
        System.out.println(clientInfo); // Display formatted client information
        System.out.println();
        printDivider1();

        // Ask the user whether to add another client or return to Main Menu
        while (true) {
            System.out.println();
            System.out.print("Do you want to add another client? (Yes/No): ");//Prompt for adding another client
            String userChoice = input.next().trim().toLowerCase();

            if (userChoice.equals("yes")) {
                break; // Continue the loop to add another client
            } else if (userChoice.equals("no")) {
                System.out.println("Returning to the main menu...");
                displayMainMenu(); // Return to the main menu
                return; // Exit the method
            } else {
                System.out.println("Invalid input! Please enter 'Yes' or 'No'.");
            }
        }
    }
}

// =============================== NEW TRANSACTION ============================= 
static void newTransaction() {
    if (clients.isEmpty()) {
        System.out.println("No clients found. Please add a client first.");
        System.out.println("Returning to the main menu...");
        displayMainMenu(); // Return to the main menu
        return; // Exit the method
    }

    printDivider1();
    System.out.println("Starting a new transaction...");
    printDivider1();

    // Display clients
    System.out.println("Select a client for the transaction:");
    System.out.println();
    for (int i = 0; i < clients.size(); i++) {
        String[] clientDetails = clients.get(i).split("\n");
        String fullName = "Unknown";
        if (clientDetails.length >= 2) {
            String[] nameParts = clientDetails[1].split(":");
            if (nameParts.length > 1) {
                fullName = nameParts[1].trim();
            }
        }
        System.out.println("[" + (i + 1) + "] " + fullName);
    }
    System.out.println();
    printDivider1();
    System.out.print("Enter client number: ");
    while (!input.hasNextInt()) {
        System.out.println("Invalid input! Please enter a valid client number:");
        input.next(); // Consume invalid input
    }
    int clientIndex = input.nextInt() - 1;// Adjust for zero-based index

    if (clientIndex < 0 || clientIndex >= clients.size()) {
        System.out.println("Invalid client selection.");
        System.out.println("Returning to the main menu...");
        displayMainMenu(); // Return to the main menu
        return;
    }

    String selectedClient = clients.get(clientIndex);// Get selected client information
    System.out.println();


    // Extract client details
    String[] clientDetails = selectedClient.split("\n");
    if (clientDetails.length < 3) {
        System.out.println("Error: Client information is incomplete or improperly formatted.");
        System.out.println("Returning to the main menu...");
        displayMainMenu(); // Return to the main menu
        return;
    }

    String name = clientDetails[1].split(":")[1].trim().split(" ")[0];// Extract first name
    String lastName = clientDetails[1].split(":")[1].trim().split(" ")[1];// Extract last name
    int age = Integer.parseInt(clientDetails[2].split(":")[1].trim());// Extract age
    String gender = clientDetails[3].split(":")[1].trim();//Extract Gender

    // Display the SALE COMPUTATION menu
    displaySaleComputationMenu1(name, lastName, age, gender);// Pass client details to the SALE COMPUTATION menu
}

// =============================== ASK CLIENT ACTION =========================
static void askClientAction(String name, String lastName, int age, String gender) {
    while (true) {
        System.out.println("===================================================================");
        System.out.println("What would you like to do next?");
        System.out.println("Please select from the following option then press enter:");
        System.out.println("[1] Use the same client");
        System.out.println("[2] Choose a different client");
        System.out.println("[0] Return to Main Menu");
        System.out.println("===================================================================");
        System.out.print("Enter your choice: ");

        String choice = input.next().trim();// Read user input and trim spaces

        switch (choice) {
            case "1": // Use the same client
                System.out.println("Proceeding with the same client...");
                printProductTable(); // Display the product table
                char productClassSelected;// Product class selection
                do {
                    productClassSelected = getProductClass(input);// Get product class from user input

                    if (productClassSelected == 'A') {
                        proccess_A_class(input, name, lastName, age, gender, productClassSelected);// Process Class A
                    } else if (productClassSelected == 'B') {
                        proccess_B_class(input, name, lastName, age, gender, productClassSelected);// Process Class B
                    }
                } while (productClassSelected != 'A' && productClassSelected != 'B');// Continue until a valid class is selected
                return;

            case "2": // Choose a different client
                if (clients.isEmpty()) {
                    System.out.println("No clients found. Please add a client first.");
                    return;
                }

                // Display the list of clients (no extra blank lines)
                System.out.println("Select a client for the transaction:");
                System.out.println();
                for (int i = 0; i < clients.size(); i++) {
                    String[] clientDetails = clients.get(i).split("\n");
                    String fullName = "Unknown";
                    if (clientDetails.length >= 2) {
                        String[] nameParts = clientDetails[1].split(":");
                        if (nameParts.length > 1) {
                            fullName = nameParts[1].trim();
                        }
                    }
                    System.out.println("[" + (i + 1) + "] " + fullName);
                }

                int clientIndex = -1; // Initialize clientIndex
                while (true) {
                System.out.println();
                    System.out.print("Enter client number: ");
                    while (!input.hasNextInt()) {
                        System.out.println("Invalid input! Please enter a valid client number:");
                        input.next(); // Consume invalid input
                    }
                    clientIndex = input.nextInt() - 1; // Adjust for zero-based index

                    if (clientIndex >= 0 && clientIndex < clients.size()) {
                        break; // Valid client selected, exit the loop
                    } else {
                        System.out.println("Invalid client selection. Please select a valid client number.");
                    }
                }

                String selectedClient = clients.get(clientIndex); // Get selected client information

                // Extract client details
                String[] clientDetails = selectedClient.split("\n"); // Extract client details
                if (clientDetails.length < 4) {
                    System.out.println("Error: Client information is incomplete or improperly formatted.");
                    return;
                }

                String newName = clientDetails[1].split(":")[1].trim().split(" ")[0]; // Extract first name
                String newLastName = clientDetails[1].split(":")[1].trim().split(" ")[1]; // Extract last name
                int newAge = Integer.parseInt(clientDetails[2].split(":")[1].trim()); // Extract age
                String newGender = clientDetails[3].split(":")[1].trim(); // Extract Gender

                // Proceed to the SALE COMPUTATION menu with the selected client
                displaySaleComputationMenu1(newName, newLastName, newAge, newGender);
                return;

            case "0": // Return to Main Menu
                System.out.println("Returning to the main menu...");
                displayMainMenu(); // Return to the main menu
                return;

            default:
                System.out.println("Invalid input! Please enter [1], [2], or [0].");
        }
    }
 }
 }
