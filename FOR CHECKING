import java.util.ArrayList; 
import java.util.Scanner; 

public class Salescomputationfixed { 
    
    static ArrayList<String> transactions = new ArrayList<>(); 
    static ArrayList<String> clients = new ArrayList<>(); // Store client information
    static Scanner input = new Scanner(System.in); 
    static int transactionCount = 0; // This is for a loop wherein the transaction number will increase depending on the user 
    static int clientCount = 0; // Counter for client numbering

    public static void main(String[] args) {
        while (true) {
            System.out.println("                [ Welcome to Sales Computation !!! ]");
            System.out.println();
            printDivider1();
            System.out.println(" This program will help you calculate your total sales and discounts.");
            System.out.println("       We'll calculate the tax and discounts automatically.");
            System.out.println("             Don't forget to review the final total!");
            printDivider1();
            System.out.println();

            boolean shouldProceed = false;
            while (true) {
                System.out.print("Do you wish to proceed? (Yes/No): ");
                String proceed = input.nextLine().trim().toLowerCase();
                
                if (proceed.equals("yes")) {
                    shouldProceed = true;
                    break;
                } 
                else if (proceed.equals("no")) {
                    System.out.println("Program terminated by user.");
                    shouldProceed = false;
                    break;
                }
                else {
                    System.out.println("Invalid input! Please enter 'Yes' or 'No'.");
                }
            }
        
            if (!shouldProceed) {
                return;  
            }
            
            displayMainMenu();

        }
        
    }


// Updated Main Menu Display
static void displayMainMenu() {
    String selectedOption;
    
    do {
        System.out.println();
        System.out.println("SALE COMPUTATION");
        System.out.println("[1] Add Client Information");
        System.out.println("[2] New Transaction");
        System.out.println("[3] View Transactions");
        System.out.println("[0] Exit");
        System.out.println();
        
        System.out.print("Enter: ");
        selectedOption = input.next();
        System.out.println();

        switch (selectedOption) {
            case "1": // Add Client Information
                addClientInformation();
                break;

            case "2": // New Transaction
                newTransaction();
                break;

            case "3": // View Transactions
                printAllTransactions();
                break;

            case "0": // Exit
                printDivider1();
                System.out.println("Thank You!");
                input.close();
                System.exit(0);

            default:
                System.out.println("INVALID!!! [1], [2], [3], AND [0] Only");
                printDivider1();
        }
    } while (!selectedOption.equals("0"));
}


// =========================== Display methods =============================== 
static void displaySaleComputationMenu1(String name, String lastName, int age, String gender) {
    System.out.println();
    System.out.println("SALE COMPUTATION");
    System.out.println("[1] Compute Product");
    System.out.println("[0] Return to Main Menu");
    System.out.println();

    String selectedOption;
    do {
        System.out.print("Enter: ");
        selectedOption = input.next();
        input.nextLine(); // Consume newline

        switch (selectedOption) {
            case "1":
                printProductTable();
                char productClassSelected;
                do {
                    productClassSelected = getProductClass(input);

                    if (productClassSelected == 'A') {
                        proccess_A_class(input, name, lastName, age, gender, productClassSelected);
                    } else if (productClassSelected == 'B') {
                        proccess_B_class(input, name, lastName, age, gender, productClassSelected);
                    }
                } while (productClassSelected != 'A' && productClassSelected != 'B');
                break;

            case "0":
                System.out.println("Returning to the main menu...");
                displayMainMenu(); // Return to the main menu
                return;

            default:
                System.out.println("INVALID!!! [1] AND [0] Only");
                printDivider1();
        }
    } while (!selectedOption.equals("0"));
}
    
static void printDivider1() 
{System.out.println("===================================================================" );} 
        
static void printDivider2() 
{System.out.println(":::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::");} 
        
static void printPrice(int rawPriceProduct) 
{System.out.println("Price: " + rawPriceProduct);} 
        
static void printDiscount(double discount) 
{System.out.println("Discount Amount: " + discount);} 
       
static void printTotalPrice(int priceProduct) 
{System.out.println("Total Price: " + priceProduct);} 

// ======================= GETTER METHODS ==================================== 
static String getName() {
    input.nextLine(); // Consume leftover newline
    System.out.print("Enter First Name: ");
    return input.nextLine().trim();
}

static String getNameLast() {
    System.out.print("Enter Last Name: ");
    return input.nextLine().trim();
}

// ---------------------------------------------------------------------------- 

static int getAge() 
{System.out.print("Enter Age: "); 
while (!input.hasNextInt()) 
{ 
System.out.println("Invalid input! Please enter a valid age:"); 
input.next();// Consume the invalid input 
} 
return input.nextInt();} 

// ---------------------------------------------------------------------------- 

static String getGender() 
{input.nextLine();// Consume the newline left by nextInt() 
while (true) 
{ 
System.out.print("Enter Gender (M/F): "); 
String gender = input.nextLine().trim().toUpperCase();// Trim spaces and convert to uppercase 
        
if (gender.equals("M") || gender.equals("F")) 
{return gender;} 
        
else 
{System.out.println("Invalid input! Please choose 'M' or 'F'.");} 
} 
} 
        
// ---------------------------------------------------------------------------- 

static char getProductClass(Scanner input) {
    System.out.println();
    System.out.println("======= Select Product Class =======");
    System.out.println("[A] \n[B]");
    System.out.println();
    System.out.print("Enter Class: ");

    while (true) {
        String inputClass = input.next().trim().toUpperCase(); // Read input, trim spaces, and convert to uppercase
        if (inputClass.equals("A") || inputClass.equals("B")) {
            return inputClass.charAt(0); // Return the valid class
        } else {
            System.out.println("Invalid input! Please enter 'A' or 'B'.");
            System.out.print("Enter Class: ");
        }
    }
}

// ---------------------------------------------------------------------------- 

static int getQuantityProduct(Scanner input) 
{System.out.print("Enter Product Quantity: "); 
return input.nextInt();} 

// ---------------------------------------------------------------------------- 

static int getProductNumber(Scanner input) 
{System.out.println(); 
System.out.print("Enter Product Number: "); 
return input.nextInt();} 

// ---------------------------------------------------------------------------- 

public static void printAllTransactions() {
    while (true) {
        System.out.println("===================================================================");
        System.out.println("[All Transactions]");
        System.out.println();

        // Display filtering options
        System.out.println("How would you like to filter transactions?");
        System.out.println();
        System.out.println("[1] View All");
        System.out.println("[2] By Product Class");
        System.out.println("[3] By Product Number");
        System.out.println("[4] By Price");
        System.out.println("[5] By Discount");
        System.out.println("[6] By Client Name");
        System.out.println("[0] To Main Menu");
        System.out.println();
        System.out.print("Enter your choice: ");
        String choice = input.next();
        input.nextLine(); // Consume newline

        if (choice.equals("0")) {
            System.out.println("Returning to the main menu...");
            displayMainMenu(); // Return to the main menu
            return; // Exit the method
        }

        // Check if transactions are empty for filtering options
        if (transactions.isEmpty() && (choice.equals("1") || choice.equals("2") || choice.equals("3") || choice.equals("4") || choice.equals("5") || choice.equals("6"))) {
            System.out.println("No transactions found.");
            continue; // Restart the loop to show filtering options again
        }

        switch (choice) {
            case "1": // View All Transactions
                displayTransactions(transactions);
                break;

            case "2": // Filter by Product Class
                System.out.println();
                System.out.print("Enter Product Class (A/B): ");
                filterTransactions("Class", input.nextLine());
                break;

                case "3": // Filter by Product Number
                System.out.println();
                System.out.print("Enter Product Number: ");
                filterTransactions("Product No", input.nextLine());
                break;
            
            case "4": // Filter by Price
                System.out.println();
                System.out.print("Enter Final Price: ");
                filterTransactions("Total", input.nextLine());
                break;
            
            case "5": // Filter by Discount
                System.out.println();
                System.out.print("Enter Discount Amount: ");
                filterTransactions("Discount", input.nextLine());
                break;

            case "6": // Filter by Client Name
                System.out.println();
                System.out.print("Enter Client First Name: ");
                String firstName = input.nextLine().trim();
                System.out.print("Enter Client Last Name: ");
                String lastName = input.nextLine().trim();
                String fullName = firstName + " " + lastName;
                System.out.println();
                filterTransactions("Full Name", fullName);
                break;

            default:
                System.out.println();
                System.out.println("Invalid input. Please try again.");
                System.out.println();
        }

        // Ask the user if they want to filter again or exit
        while (true) {
            System.out.println("===================================================================");
            System.out.println();
            System.out.println("[1] Filter Again");
            System.out.println("[0] Return to Main Menu");
            System.out.println();
            System.out.print("Enter your choice: ");

            String filterChoice = input.nextLine().trim();
            if (filterChoice.equals("1")) {
                break; // Restart filtering
            } else if (filterChoice.equals("0")) {
                System.out.println("Returning to the main menu...");
                displayMainMenu(); // Return to the main menu
                return; // Exit the method
            } else {
                System.out.println("Invalid input. Please enter 1 to filter again or 0 to exit.");
            }
        }
    }
}

// ---------------------------------------------------------------------------- 
       
private static void displayTransactions(ArrayList<String> filteredTransactions) {
        for (String transaction : filteredTransactions) {
        System.out.println(transaction); } }
        
// ----------------------------------------------------------------------------         
        
private static void filterTransactions(String criteria, String filterValue) {
    ArrayList<String> filteredTransactions = new ArrayList<>();
    filterValue = filterValue.trim(); // Trim spaces from the input

    for (String transaction : transactions) {
        String[] lines = transaction.split("\n");

        if (criteria.equalsIgnoreCase("Product No")) {
            // Extract the "Product Number" from the transaction
            for (String line : lines) {
                if (line.contains("Product Number:")) {
                    String productNumberString = line.split(":")[1].trim(); // Extract the product number value
                    if (productNumberString.equals(filterValue)) {
                        filteredTransactions.add(transaction);
                    }
                }
            }
        } else if (criteria.equalsIgnoreCase("Discount")) {
            // Extract the "Discount Amount" from the transaction
            for (String line : lines) {
                if (line.contains("Discount Amount:")) {
                    String discountString = line.split(":")[1].trim(); // Extract the discount value
                    try {
                        double discount = Double.parseDouble(discountString); // Parse the discount amount
                        double enteredDiscount = Double.parseDouble(filterValue); // Parse the user-entered discount
                        if (discount == enteredDiscount) {
                            filteredTransactions.add(transaction);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid discount format. Please enter a valid numeric value.");
                        return;
                    }
                }
            }
        } else if (criteria.equalsIgnoreCase("Total")) {
            // Extract the "Final Price" from the transaction
            for (String line : lines) {
                if (line.contains("Final Price:")) {
                    String finalPriceString = line.split(":")[1].trim(); // Extract the final price value
                    try {
                        double finalPrice = Double.parseDouble(finalPriceString); // Parse the final price
                        double enteredPrice = Double.parseDouble(filterValue); // Parse the user-entered price
                        if (finalPrice == enteredPrice) {
                            filteredTransactions.add(transaction);
                        }
                    } catch (NumberFormatException e) {
                        System.out.println("Invalid price format. Please enter a valid numeric value.");
                        return;
                    }
                }
            }
        } else {
            // Default behavior for other criteria
            String lowerTransaction = transaction.toLowerCase();
            if (lowerTransaction.contains(criteria.toLowerCase() + ": " + filterValue.toLowerCase())) {
                filteredTransactions.add(transaction);
            }
        }
    }

    if (filteredTransactions.isEmpty()) {
        System.out.println("No transactions found with " + criteria + " = " + filterValue);
    } else {
        displayTransactions(filteredTransactions);
    }
}

// ======================= Calculation methods ============================= 

static int computeQuantityProductPrice(int quantityProduct, int rawPriceProduct) 
{ return quantityProduct * rawPriceProduct; } 
static double computeDiscountAmount(int priceProduct, double discountPercentage) 
{ return priceProduct * discountPercentage; } 
static double computeDiscountedSales(int priceProduct, double discount) 
{ return priceProduct - discount; } 

// =============================== CLASS A Method =================================== 
//changes return type to void 
//added parameters 

static void proccess_A_class(Scanner input, String name, String lastName, int age, String gender, char productClassSelected) {
    int productNumber, quantityProduct, rawPriceProduct = 0, priceProduct;
    double discountPercentage = 0, discountAmount, finalPrice;

    System.out.println();
    System.out.println("============================== A Class ================================");
    System.out.println("                   Product number range (100 - 130)");
    System.out.println("=======================================================================");

    while (true) {
        productNumber = getProductNumber(input);

        if (productNumber >= 100 && productNumber <= 109) {
            discountPercentage = 0.05;
            rawPriceProduct = 120;
            break;
        } else if (productNumber >= 110 && productNumber <= 119) {
            discountPercentage = 0.075;
            rawPriceProduct = 135;
            break;
        } else if (productNumber >= 120 && productNumber <= 130) {
            discountPercentage = 0.10;
            rawPriceProduct = 150;
            break;
        } else {
            System.out.println("Invalid range! Try again (100 - 130)");
        }
    }

    printPrice(rawPriceProduct);
    quantityProduct = getQuantityProduct(input);
    priceProduct = computeQuantityProductPrice(quantityProduct, rawPriceProduct);
    printTotalPrice(priceProduct);

    discountAmount = computeDiscountAmount(priceProduct, discountPercentage);
    printDiscount(discountAmount);

    finalPrice = computeDiscountedSales(priceProduct, discountAmount);
    printReceipt(name, lastName, age, gender, priceProduct, finalPrice, productClassSelected, productNumber, quantityProduct, discountAmount);
}

// ============================== CLASS B METHOD ===================================== 
//changes return type to void 
//added parameters 

static void proccess_B_class(Scanner input, String name, String lastName, int age, String gender, char productClassSelected) {
    int productNumber, quantityProduct, rawPriceProduct = 0, priceProduct;
    double discountPercentage = 0, discountAmount, finalPrice;

    System.out.println();
    System.out.println("============================== B Class ================================");
    System.out.println("                   Product number range (220 - 250)");
    System.out.println("=======================================================================");

    while (true) {
        productNumber = getProductNumber(input);

        if (productNumber >= 220 && productNumber <= 229) {
            discountPercentage = 0.15;
            rawPriceProduct = 100;
            break;
        } else if (productNumber >= 230 && productNumber <= 239) {
            discountPercentage = 0.175;
            rawPriceProduct = 140;
            break;
        } else if (productNumber >= 240 && productNumber <= 250) {
            discountPercentage = 0.20;
            rawPriceProduct = 170;
            break;
        } else {
            System.out.println("Invalid range! Try again (220 - 250)");
        }
    }

    printPrice(rawPriceProduct);
    quantityProduct = getQuantityProduct(input);

    // Validate quantity
    while (quantityProduct <= 0) {
        System.out.println("Invalid quantity! Please enter a positive number.");
        quantityProduct = getQuantityProduct(input);
    }

    priceProduct = computeQuantityProductPrice(quantityProduct, rawPriceProduct);
    printTotalPrice(priceProduct);

    discountAmount = computeDiscountAmount(priceProduct, discountPercentage);
    printDiscount(discountAmount);

    finalPrice = computeDiscountedSales(priceProduct, discountAmount);
    printReceipt(name, lastName, age, gender, priceProduct, finalPrice, productClassSelected, productNumber, quantityProduct, discountAmount);
}

// =============================== RECEIPT DISPLAY ========================= 
// added parameters , call the parameters inside the out print 

static void printReceipt(String name, String lastName, int age, String gender, int priceProduct, double computedPrice, char productClass, int productNumber, int quantityProduct, double discountAmount) {
    transactionCount++; // Increment transaction count
    System.out.println();

    // Format the transaction details
    String transaction =
        "                   ----- Transaction #" + transactionCount + " -----" + "\n" +
        "                         Full Name: " + name + " " + lastName + "\n" +
        "                         Age: " + age + "\n" +
        "                         Gender: " + gender + "\n" +
        "                         Product Class: " + productClass + "\n" +
        "                         Product Number: " + productNumber + "\n" +
        "                         Quantity: " + quantityProduct + "\n" +
        "                         Total Price: " + String.format("%.2f", (double) priceProduct) + "\n" +
        "                         Discount Amount: " + String.format("%.2f", discountAmount) + "\n" +
        "                         Final Price: " + String.format("%.2f", computedPrice) +
        "\n";

    // Add the transaction to the list for later retrieval
    transactions.add(transaction);

    // Print the receipt
    printDivider1();
    System.out.println();
    System.out.println("                            [RECEIPT]:");
    System.out.println();
    System.out.println(transaction); // Print the transaction details
    printDivider1();
    System.out.println();

    // Ask the user what to do next
    askClientAction(name, lastName, age, gender);
}

// =============================== PRODUCT TABLE ============================= 
static void printProductTable() 
{
    System.out.println("-----------------------------------------------------------------------");
    System.out.println("|   Product Class   |   Product No.   |     Price    |    Discount    |");          
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|         A         |     100-109     |     120.00   |       5%       |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|                   |     110-119     |     135.00   |       7.5%     |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|                   |     120-130     |     150.00   |        10%     |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|         B         |     220-229     |     100.00   |       15%      |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|                   |     230-239     |     140.00   |       17.5%    |");
    System.out.println("----------------------------------------------------------------------|");
    System.out.println("|                   |     240-250     |     170.00   |       20%      |");
    System.out.println("-----------------------------------------------------------------------");
    
}

// =============================== ADD CLIENT INFORMATION ====================
static void addClientInformation() {
    while (true) {
        printDivider1();
        System.out.println("Adding a new client...");
        printDivider1();

        String name = getName();
        String lastName = getNameLast();
        int age = getAge();
        String gender = getGender();
        printDivider1();

        // Increment client count and store client information
        clientCount++;
        String clientInfo = "Client #" + clientCount + "\n" +
                            "Name: " + name + " " + lastName + "\n" +
                            "Age: " + age + "\n" +
                            "Gender: " + gender;
        clients.add(clientInfo);

        System.out.println();
        System.out.println("Client added successfully!");
        printDivider1();
        System.out.println();
        System.out.println("Client Information:");
        System.out.println(clientInfo); // Display formatted client information
        System.out.println();
        printDivider1();

        // Ask the user whether to add another client or return to Main Menu
        while (true) {
            System.out.println();
            System.out.print("Do you want to add another client? (Yes/No): ");
            String userChoice = input.next().trim().toLowerCase();

            if (userChoice.equals("yes")) {
                break; // Continue the loop to add another client
            } else if (userChoice.equals("no")) {
                System.out.println("Returning to the main menu...");
                displayMainMenu(); // Return to the main menu
                return; // Exit the method
            } else {
                System.out.println("Invalid input! Please enter 'Yes' or 'No'.");
            }
        }
    }
}

// =============================== NEW TRANSACTION ============================= 
static void newTransaction() {
    if (clients.isEmpty()) {
        System.out.println("No clients found. Please add a client first.");
        System.out.println("Returning to the main menu...");
        displayMainMenu(); // Return to the main menu
        return; // Exit the method
    }

    printDivider1();
    System.out.println("Starting a new transaction...");
    printDivider1();

    // Display clients
    System.out.println("Select a client for the transaction:");
    System.out.println();
    for (int i = 0; i < clients.size(); i++) {
        System.out.println(clients.get(i));
        System.out.println();
    }
    printDivider1();
    System.out.print("Enter client number: ");
    while (!input.hasNextInt()) {
        System.out.println("Invalid input! Please enter a valid client number:");
        input.next(); // Consume invalid input
    }
    int clientIndex = input.nextInt() - 1;

    if (clientIndex < 0 || clientIndex >= clients.size()) {
        System.out.println("Invalid client selection.");
        System.out.println("Returning to the main menu...");
        displayMainMenu(); // Return to the main menu
        return;
    }

    String selectedClient = clients.get(clientIndex);
    System.out.println();
    System.out.println("Selected Client: ");
    System.out.println(selectedClient);

    // Extract client details
    String[] clientDetails = selectedClient.split("\n");
    if (clientDetails.length < 3) {
        System.out.println("Error: Client information is incomplete or improperly formatted.");
        System.out.println("Returning to the main menu...");
        displayMainMenu(); // Return to the main menu
        return;
    }

    String name = clientDetails[1].split(":")[1].trim().split(" ")[0];
    String lastName = clientDetails[1].split(":")[1].trim().split(" ")[1];
    int age = Integer.parseInt(clientDetails[2].split(":")[1].trim());
    String gender = clientDetails[3].split(":")[1].trim();

    // Display the SALE COMPUTATION menu
    displaySaleComputationMenu1(name, lastName, age, gender);
}

// =============================== ASK CLIENT ACTION =========================
static void askClientAction(String name, String lastName, int age, String gender) {
    while (true) {
        System.out.println("===================================================================");
        System.out.println("What would you like to do next?");
        System.out.println("[1] Use the same client");
        System.out.println("[2] Choose a different client");
        System.out.println("[0] Return to Main Menu");
        System.out.println("===================================================================");
        System.out.print("Enter your choice: ");

        String choice = input.next().trim();

        switch (choice) {
            case "1": // Use the same client
                System.out.println("Proceeding with the same client...");
                printProductTable(); // Display the product table
                char productClassSelected;
                do {
                    productClassSelected = getProductClass(input);

                    if (productClassSelected == 'A') {
                        proccess_A_class(input, name, lastName, age, gender, productClassSelected);
                    } else if (productClassSelected == 'B') {
                        proccess_B_class(input, name, lastName, age, gender, productClassSelected);
                    }
                } while (productClassSelected != 'A' && productClassSelected != 'B');
                return;

            case "2": // Choose a different client
                if (clients.isEmpty()) {
                    System.out.println("No clients found. Please add a client first.");
                    return;
                }

                // Display the list of clients
                System.out.println("Select a client for the transaction:");
                System.out.println();
                for (int i = 0; i < clients.size(); i++) {
                    System.out.println("[" + (i + 1) + "] " + clients.get(i));
                    System.out.println();
                }
                System.out.print("Enter client number: ");
                while (!input.hasNextInt()) {
                    System.out.println("Invalid input! Please enter a valid client number:");
                    input.next(); // Consume invalid input
                }
                int clientIndex = input.nextInt() - 1;

                if (clientIndex < 0 || clientIndex >= clients.size()) {
                    System.out.println("Invalid client selection.");
                    return;
                }

                String selectedClient = clients.get(clientIndex);
                System.out.println("Selected Client: " + selectedClient);

                // Extract client details
                String[] clientDetails = selectedClient.split("\n");
                if (clientDetails.length < 4) {
                    System.out.println("Error: Client information is incomplete or improperly formatted.");
                    return;
                }

                String newName = clientDetails[1].split(":")[1].trim().split(" ")[0];
                String newLastName = clientDetails[1].split(":")[1].trim().split(" ")[1];
                int newAge = Integer.parseInt(clientDetails[2].split(":")[1].trim());
                String newGender = clientDetails[3].split(":")[1].trim();

                // Proceed to the SALE COMPUTATION menu with the selected client
                displaySaleComputationMenu1(newName, newLastName, newAge, newGender);
                return;

            case "0": // Return to Main Menu
                System.out.println("Returning to the main menu...");
                displayMainMenu(); // Return to the main menu
                return;

            default:
                System.out.println("Invalid input! Please enter [1], [2], or [0].");
        }
    }
}
}
